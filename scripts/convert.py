LC_DIRS = ['000', '100', '200', '300', '400', '500', '600', '700']
PATTERN = r'^(\d{3}) - ([\w\d \-\(\)]+).(py|java|c|sql|sh)$'
WORD_PATTERN = r'[\w\d]+'

EXT_TO_DIR = {
    'py': 'python3',
    'java': 'java',
    'c': 'c',
    'sql': 'mysql',
    'sh': 'bash',
}

EXT_TO_HEADER = {
    'py': '#\n# @lc app=leetcode id=%d lang=python3\n#\n# [%d] %s\n#\n# autogenerated using scripts/convert.py\n#',
    'java': '/*\n * @lc app=leetcode id=%d lang=java\n *\n * [%d] %s\n *\n * autogenerated using scripts/convert.py\n */',
    'c': '/*\n * @lc app=leetcode id=%d lang=c\n *\n * [%d] %s\n *\n * autogenerated using scripts/convert.py\n */',
    'sql': '--\n-- @lc app=leetcode id=%d lang=mysql\n--\n-- [%d] %s\n--\n-- autogenerated using scripts/convert.py\n--',
    'sh': '#\n# @lc app=leetcode id=%d lang=bash\n#\n# [%d] %s\n#\n# autogenerated using scripts/convert.py\n#',
}
        
def _init_logging():
    import logging
    logging.basicConfig(format='%(asctime)s: %(levelname)s %(pathname)s:%(lineno)d] %(message)s')
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    return logger

def main():
    from os import listdir, makedirs
    from os.path import isdir, join
    from re import compile

    logger = _init_logging()
    pattern = compile(PATTERN)
    word_pattern = compile(WORD_PATTERN)
    
    for _, lang_dir in EXT_TO_DIR.items():
        if not isdir(lang_dir):
            logger.warning('%s is not a directory! Making...', lang_dir)
            try:
                makedirs(lang_dir)
            except OSError:
                raise

    for origin_dir in LC_DIRS:
        if not isdir(origin_dir):
            logger.error('%s does not exist!', origin_dir)
            continue
        logger.info('Processing %s...', origin_dir)
        for filename in listdir(origin_dir):
            result = pattern.search(filename)
            if not result:
                logger.error('Failed to match %s with regex!', filename)
                continue
            num = int(result.group(1))
            old_name = result.group(2)
            ext = result.group(3)
            
            new_name = '-'.join(word_pattern.findall(result.group(2).lower()))
            lang_dir = EXT_TO_DIR[ext]

            old_filename = join(origin_dir, filename)
            new_filename = join(lang_dir, '%d.%s.%s' % (num, new_name, ext,))

            logger.debug('\"%s\" => \"%s\"', old_filename, new_filename)
            
            with open(old_filename, 'r') as old_f, open(new_filename, 'w') as new_f:
                print(EXT_TO_HEADER[ext] % (num, num, old_name,), file=new_f)
                for line in old_f:
                    new_f.write(line)

if __name__ == '__main__':
    main()
